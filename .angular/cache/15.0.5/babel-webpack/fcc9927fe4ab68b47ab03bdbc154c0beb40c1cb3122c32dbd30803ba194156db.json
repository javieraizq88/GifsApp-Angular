{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from 'src/env/env';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class GifsService {\n  constructor(http) {\n    this.http = http;\n    this.gifList = [];\n    this._tagsHistory = [];\n    this.apiKey = environment.apiKey;\n    this.serviceUrl = environment.serviceUrl;\n    this.loadLocalStorage();\n    console.log('Gifs Service Ready');\n  }\n  get tagsHistory() {\n    return [...this._tagsHistory];\n  }\n  organizeHistory(tag) {\n    tag = tag.toLowerCase();\n    if (this._tagsHistory.includes(tag)) {\n      this._tagsHistory = this._tagsHistory.filter(oldTag => oldTag !== tag);\n    }\n    this._tagsHistory.unshift(tag);\n    this._tagsHistory = this.tagsHistory.splice(0, 10); // muestra 10 resultados\n    this.saveLocalStorage();\n  }\n  saveLocalStorage() {\n    localStorage.setItem('history', JSON.stringify(this._tagsHistory));\n  }\n  loadLocalStorage() {\n    if (!localStorage.getItem('history')) return; // verificar si hay data en el localStorage\n    this._tagsHistory = JSON.parse(localStorage.getItem('history'));\n    if (this._tagsHistory.length === 0) return;\n    this.searchTag(this._tagsHistory[0]);\n  }\n  searchTag(tag) {\n    if (tag.length === 0) return;\n    this.organizeHistory(tag);\n    const params = new HttpParams().set('api_key', this.apiKey).set('limit', '10').set('q', tag);\n    this.http.get(`${this.serviceUrl}/search`, {\n      params\n    }).subscribe(resp => {\n      this.gifList = resp.data;\n      // console.log({ gifs: this.gifList });\n    });\n  }\n}\n\nGifsService.ɵfac = function GifsService_Factory(t) {\n  return new (t || GifsService)(i0.ɵɵinject(i1.HttpClient));\n};\nGifsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GifsService,\n  factory: GifsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;AAE7D,SAASC,WAAW,QAAQ,aAAa;;;AAGzC,OAAM,MAAOC,WAAW;EAQtBC,YAAqBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IANlB,YAAO,GAAU,EAAE;IAElB,iBAAY,GAAa,EAAE;IAC3B,WAAM,GAAiBH,WAAW,CAACI,MAAM;IACzC,eAAU,GAAaJ,WAAW,CAACK,UAAU;IAGnD,IAAI,CAACC,gBAAgB,EAAE;IACvBC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;EACnC;EAEA,IAAIC,WAAW;IACb,OAAO,CAAC,GAAG,IAAI,CAACC,YAAY,CAAC;EAC/B;EAEQC,eAAe,CAACC,GAAW;IACjCA,GAAG,GAAGA,GAAG,CAACC,WAAW,EAAE;IAEvB,IAAK,IAAI,CAACH,YAAY,CAACI,QAAQ,CAAEF,GAAG,CAAE,EAAG;MACvC,IAAI,CAACF,YAAY,GAAG,IAAI,CAACA,YAAY,CAACK,MAAM,CAAGC,MAAM,IAAKA,MAAM,KAAKJ,GAAG,CAAE;;IAG5E,IAAI,CAACF,YAAY,CAACO,OAAO,CAAEL,GAAG,CAAE;IAChC,IAAI,CAACF,YAAY,GAAG,IAAI,CAACD,WAAW,CAACS,MAAM,CAAC,CAAC,EAAC,EAAE,CAAC,CAAC,CAAC;IACnD,IAAI,CAACC,gBAAgB,EAAE;EACzB;EAEQA,gBAAgB;IACtBC,YAAY,CAACC,OAAO,CAAC,SAAS,EAAEC,IAAI,CAACC,SAAS,CAAE,IAAI,CAACb,YAAY,CAAE,CAAC;EACtE;EAEQJ,gBAAgB;IACtB,IAAI,CAACc,YAAY,CAACI,OAAO,CAAC,SAAS,CAAC,EAAE,OAAO,CAAC;IAE9C,IAAI,CAACd,YAAY,GAAGY,IAAI,CAACG,KAAK,CAAEL,YAAY,CAACI,OAAO,CAAC,SAAS,CAAE,CAAE;IAElE,IAAK,IAAI,CAACd,YAAY,CAACgB,MAAM,KAAK,CAAC,EAAG;IACtC,IAAI,CAACC,SAAS,CAAE,IAAI,CAACjB,YAAY,CAAC,CAAC,CAAC,CAAE;EACxC;EAGAiB,SAAS,CAAEf,GAAW;IACpB,IAAKA,GAAG,CAACc,MAAM,KAAK,CAAC,EAAG;IACxB,IAAI,CAACf,eAAe,CAACC,GAAG,CAAC;IAEzB,MAAMgB,MAAM,GAAG,IAAI7B,UAAU,EAAE,CAC5B8B,GAAG,CAAC,SAAS,EAAE,IAAI,CAACzB,MAAM,CAAE,CAC5ByB,GAAG,CAAC,OAAO,EAAE,IAAI,CAAE,CACnBA,GAAG,CAAC,GAAG,EAAEjB,GAAG,CAAE;IAEjB,IAAI,CAACT,IAAI,CAAC2B,GAAG,CAAiB,GAAI,IAAI,CAACzB,UAAW,SAAS,EAAE;MAAEuB;IAAM,CAAE,CAAC,CACrEG,SAAS,CAAEC,IAAI,IAAG;MAEjB,IAAI,CAACC,OAAO,GAAGD,IAAI,CAACE,IAAI;MACxB;IAEF,CAAC,CAAC;EAON;;;AAjEWjC,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAkC,SAAXlC,WAAW;EAAAmC,YADE;AAAM","names":["HttpParams","environment","GifsService","constructor","http","apiKey","serviceUrl","loadLocalStorage","console","log","tagsHistory","_tagsHistory","organizeHistory","tag","toLowerCase","includes","filter","oldTag","unshift","splice","saveLocalStorage","localStorage","setItem","JSON","stringify","getItem","parse","length","searchTag","params","set","get","subscribe","resp","gifList","data","factory","providedIn"],"sourceRoot":"","sources":["/Users/adjavieraizquierdo/Documents/javiera/angular-gif-app/src/app/gifs/services/gifs.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { SearchResponse, Gif } from '../interfaces/gifs.interfaces';\nimport { environment } from 'src/env/env';\n\n@Injectable({ providedIn: 'root' })\nexport class GifsService {\n\n  public gifList: Gif[] = [];\n\n  private _tagsHistory: string[] = [];\n  private apiKey:       string = environment.apiKey ;\n  private serviceUrl:   string = environment.serviceUrl;\n\n  constructor( private http: HttpClient ) {\n    this.loadLocalStorage();\n    console.log('Gifs Service Ready');\n  }\n\n  get tagsHistory() {\n    return [...this._tagsHistory];\n  }\n\n  private organizeHistory(tag: string) {\n    tag = tag.toLowerCase();\n\n    if ( this._tagsHistory.includes( tag ) ) {\n      this._tagsHistory = this._tagsHistory.filter( (oldTag) => oldTag !== tag )\n    }\n\n    this._tagsHistory.unshift( tag );\n    this._tagsHistory = this.tagsHistory.splice(0,10); // muestra 10 resultados\n    this.saveLocalStorage();\n  }\n\n  private saveLocalStorage():void {\n    localStorage.setItem('history', JSON.stringify( this._tagsHistory ));\n  }\n\n  private loadLocalStorage():void {\n    if( !localStorage.getItem('history')) return; // verificar si hay data en el localStorage\n\n    this._tagsHistory = JSON.parse( localStorage.getItem('history')! );\n\n    if ( this._tagsHistory.length === 0 ) return;\n    this.searchTag( this._tagsHistory[0] );\n  }\n\n\n  searchTag( tag: string ):void {\n    if ( tag.length === 0 ) return;\n    this.organizeHistory(tag);\n\n    const params = new HttpParams()\n      .set('api_key', this.apiKey )\n      .set('limit', '10' )\n      .set('q', tag )\n\n    this.http.get<SearchResponse>(`${ this.serviceUrl }/search`, { params })\n      .subscribe( resp => {\n\n        this.gifList = resp.data;\n        // console.log({ gifs: this.gifList });\n\n      });\n\n\n\n\n\n\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}